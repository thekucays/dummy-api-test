{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 0,
    "pending": 0,
    "failures": 4,
    "start": "2022-04-16T10:17:12.756Z",
    "end": "2022-04-16T10:17:20.620Z",
    "duration": 7864,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7e11f618-8140-4024-8e44-c309f726acb0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9bfd14d3-05d2-46a1-87af-99a4317f87a9",
          "title": "[Dummy] Order Test: POST",
          "fullFile": "/home/thekucays/Documents/WORK/dummy/tests/api/dummy/get_order_test.js",
          "file": "/tests/api/dummy/get_order_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@POST @HAPPY @ORDER POS01 should success get order data",
              "fullTitle": "[Dummy] Order Test: POST @POST @HAPPY @ORDER POS01 should success get order data",
              "timedOut": false,
              "duration": 1879,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await endpoint.processOrder(process.env.TOKENDUMMY, testData.processOrderValid);\nexpect(response.status).to.equal(responseCode.successOk, JSON.stringify(response.body));\nexpect(response.body).jsonSchema(schema.processOrderSchema);",
              "err": {
                "message": "AssertionError: {}: expected 302 to equal 200",
                "estack": "AssertionError: {}: expected 302 to equal 200\n    at Context.it (tests/api/dummy/get_order_test.js:21:36)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                "diff": "- 302\n+ 200\n"
              },
              "uuid": "3ab6d181-0c94-4ca7-9ea5-b15103dfdede",
              "parentUUID": "9bfd14d3-05d2-46a1-87af-99a4317f87a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@GET @NEG @ORDER  NEG01 get error when get agent office with invalid token",
              "fullTitle": "[Dummy] Order Test: POST @GET @NEG @ORDER  NEG01 get error when get agent office with invalid token",
              "timedOut": false,
              "duration": 1975,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await endpoint.processOrder(process.env.TOKEN_DUMMY + \"abc\", null);\nexpect(response.statusCode).to.equal(responseCode.failedUnauthorized.codeNumber, JSON.stringify(response.body));",
              "err": {
                "message": "AssertionError: {}: expected 302 to equal 401",
                "estack": "AssertionError: {}: expected 302 to equal 401\n    at Context.it (tests/api/dummy/get_order_test.js:27:40)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                "diff": "- 302\n+ 401\n"
              },
              "uuid": "b35f9579-24c1-4502-b674-3f7cb1076527",
              "parentUUID": "9bfd14d3-05d2-46a1-87af-99a4317f87a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@GET @NEG @ORDER NEG02 get error when get get agent office without token",
              "fullTitle": "[Dummy] Order Test: POST @GET @NEG @ORDER NEG02 get error when get get agent office without token",
              "timedOut": false,
              "duration": 2048,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await endpoint.processOrder(null, null);\nexpect(response.status).to.equal(responseCode.failedUnauthorized.codeNumber, JSON.stringify(response.body));",
              "err": {
                "message": "AssertionError: {}: expected 302 to equal 401",
                "estack": "AssertionError: {}: expected 302 to equal 401\n    at Context.it (tests/api/dummy/get_order_test.js:32:36)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                "diff": "- 302\n+ 401\n"
              },
              "uuid": "1bb2d1b8-082a-46d4-accd-be713b356698",
              "parentUUID": "9bfd14d3-05d2-46a1-87af-99a4317f87a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@GET @NEG @ORDER NEG03 get error with empty token",
              "fullTitle": "[Dummy] Order Test: POST @GET @NEG @ORDER NEG03 get error with empty token",
              "timedOut": false,
              "duration": 1944,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await endpoint.processOrder(process.env.TOKEN_PINVEST, testData.invalidKeyParams);\nexpect(response.status).to.equal(responseCode.failedBadRequest.codeNumber, JSON.stringify(response.body));",
              "err": {
                "message": "AssertionError: {}: expected 302 to equal 400",
                "estack": "AssertionError: {}: expected 302 to equal 400\n    at Context.it (tests/api/dummy/get_order_test.js:37:36)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                "diff": "- 302\n+ 400\n"
              },
              "uuid": "cb5e72c3-34a6-444b-8b63-23abd6de0ffd",
              "parentUUID": "9bfd14d3-05d2-46a1-87af-99a4317f87a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3ab6d181-0c94-4ca7-9ea5-b15103dfdede",
            "b35f9579-24c1-4502-b674-3f7cb1076527",
            "1bb2d1b8-082a-46d4-accd-be713b356698",
            "cb5e72c3-34a6-444b-8b63-23abd6de0ffd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7846,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/"
      },
      "version": "5.2.0"
    }
  }
}